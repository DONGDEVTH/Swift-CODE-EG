import UIKit

class ViewController: UIViewController, UICollectionViewDataSource {
   @IBOutlet weak var collectionItems: UICollectionView!

   override func viewDidLoad() {
      super.viewDidLoad()
      collectionItems.dataSource = self
      collectionItems.backgroundColor = UIColor.white
   }
   func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
      return AppData.items[section].count
   }
   func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
      let cell = collectionItems.dequeueReusableCell(withReuseIdentifier: "myCell", for: indexPath) as! BookCell
      let file = AppData.items[indexPath.section][indexPath.item]
      cell.bookCover.image = UIImage(named: file)
      return cell
   }
   func numberOfSections(in collectionView: UICollectionView) -> Int {
      return AppData.categories.count
   }
   func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
      switch kind {
         case UICollectionView.elementKindSectionHeader:
            let headerView = collectionItems.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "myHeader", for: indexPath) as! HeaderView
            headerView.headerTitle.text = AppData.categories[indexPath.section]
            headerView.headerImage.image = UIImage(named: "gradientTop")
            return headerView
         case UICollectionView.elementKindSectionFooter:
            let footerView = collectionItems.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionFooter, withReuseIdentifier: "myFooter", for: indexPath) as! FooterView
            footerView.footerImage.image = UIImage(named: "gradientBottom")
            return footerView
         default:
            assert(false, "Error")
      }
   }
}